#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Pseudocode SBC Optimization
#+AUTHOR: Manuel Schneckenreither
#+EMAIL: manuel.schneckenreither@uibk.ac.at
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR:
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER: \usepackage{listings,fullpage}
#+LATEX_HEADER_EXTRA: \lstset{
#+LATEX_HEADER_EXTRA:   mathescape,
#+LATEX_HEADER_EXTRA:   literate={->}{$\rightarrow$}{2}
#+LATEX_HEADER_EXTRA:            {Îµ}{$\varepsilon$}{1}
#+LATEX_HEADER_EXTRA: }
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today


* Pseudocode of Program


** Main

#+begin_src python
  # Init phase
  Set R=100                       # Number of replications
  Set T=100                       # Set length of simulation
  Set $\lambda$=[0 0 ... ]                 # Initial population

  # Run ga optimizer on simulation with initial population l
  ga(simulation_sbc($\lambda$))


#+end_src

\vspace{1cm}
** Simulation

#+begin_src python
  # Simulation
  def simulation_sbc($\lambda$):
      for r=1 to R:

          # 1. generate $\lambda$s for all periods T
          D = exprnd($\lambda$)

          # 2. Calculate inventory and costs for all periods
          b$_r$(0)=0
          for t=1 to T:
              $\bar{\lambda}_r$(t)=$\lambda$(t)+b$_r$(t-1)
              X$_r$(t)=$\bar{\lambda}_r$(t)/(1+$\bar{\lambda}_r$(t))
              b$_r$(t)=b$_r$(t-1)+$\lambda$(t)-X$_r$(t)
              W$_r$(t)=b$_r$(t)
              I$_r$(t)=I$_r$(t-1)+X$_r$(t)-D(t)
              cost$_r$(t)=h*W$_r$(t)+g*I$_r$(t)

      # Average over periods T
      for t=1 to T:
          avgI(t)=0
          for r=1 to R:
              avgI(t) = avgI(t) + I$_r$(t)

      # Average over replications R
      for r=1 to R:
          avgCosts(r)=0
          for t=0 to T:
              avgCosts(r) = avgCosts(r) + Costs$_r$(t)

      # Mean Costs
      costs=mean(avgCosts)

      # Constraints
      if any (< 0) of avgI or any (< 0) of X or
         any (< 0) b or any (< 0) of W:
          raise optimizer constraints error

#+end_src
